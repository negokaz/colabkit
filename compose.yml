name: 'colabkit'

x-environment-http-proxy: &environment-http-proxy
  HTTP_PROXY: http://squid:3128
  http_proxy: http://squid:3128
  HTTPS_PROXY: http://squid:3128
  https_proxy: http://squid:3128
  NO_PROXY: localhost
  no_proxy: localhost

services:

  #############################################################################
  # リバースプロキシ
  # 各サービスを HTTPS で外部公開する。
  #
  # Registry URL: https://hub.docker.com/_/traefik
  #############################################################################
  traefik:
    image: colabkit.traefik:latest
    build:
      context: .
      dockerfile: traefik/Dockerfile
      args:
        TRAEFIK_VERSION: v3.1
    command:
      - --log.level=INFO
      - --api.insecure=false
      - --api.dashboard=true
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.defaultRule=Host(`${HOST_IP}`)
      - --entrypoints.portal-http.address=:${PORTAL_HTTP_PORT}
      - --entrypoints.portal-https.address=:${PORTAL_HTTPS_PORT}
      - --entrypoints.gitlab.address=:${GITLAB_PORT}
      - --entrypoints.gitlab-mattermost.address=:${GITLAB_MATTERMOST_PORT}
      - --entrypoints.gitlab-pages.address=:${GITLAB_PAGES_PORT}
      - --entrypoints.gitlab-ssh.address=:${GITLAB_SSH_PORT}
      - --entrypoints.gitlab-registry.address=:${GITLAB_REGISTRY_PORT}
      - --entrypoints.sonarqube.address=:${SONARQUBE_PORT}
      - --entrypoints.openproject.address=:${OPENPROJECT_PORT}
      - --entrypoints.growi.address=:${GROWI_PORT}
      - --entrypoints.drawio.address=:${DROWIO_PORT}
      - --entrypoints.plantuml.address=:${PLANTUML_PORT}
      - --entrypoints.lldap.address=:${LLDAP_WEB_PORT}
      - --entrypoints.traefik-dashboard.address=:${TRAEFIK_DASHBOARD_PORT}
    labels:
      traefik.enable: true
      traefik.http.routers.traefik-dashboard.tls: true
      traefik.http.routers.traefik-dashboard.entrypoints: traefik-dashboard
      traefik.http.routers.traefik-dashboard.service: api@internal
    depends_on:
      - tls-certs-generator
    ports:
      - ${HOST_IP}:${PORTAL_HTTP_PORT}:${PORTAL_HTTP_PORT}
      - ${HOST_IP}:${PORTAL_HTTPS_PORT}:${PORTAL_HTTPS_PORT}
      - ${HOST_IP}:${GITLAB_PORT}:${GITLAB_PORT}
      - ${HOST_IP}:${GITLAB_MATTERMOST_PORT}:${GITLAB_MATTERMOST_PORT}
      - ${HOST_IP}:${GITLAB_PAGES_PORT}:${GITLAB_PAGES_PORT}
      - ${HOST_IP}:${GITLAB_SSH_PORT}:${GITLAB_SSH_PORT}
      - ${HOST_IP}:${GITLAB_REGISTRY_PORT}:${GITLAB_REGISTRY_PORT}
      - ${HOST_IP}:${SONARQUBE_PORT}:${SONARQUBE_PORT}
      - ${HOST_IP}:${OPENPROJECT_PORT}:${OPENPROJECT_PORT}
      - ${HOST_IP}:${GROWI_PORT}:${GROWI_PORT}
      - ${HOST_IP}:${DROWIO_PORT}:${DROWIO_PORT}
      - ${HOST_IP}:${PLANTUML_PORT}:${PLANTUML_PORT}
      - ${HOST_IP}:${LLDAP_WEB_PORT}:${LLDAP_WEB_PORT}
      - ${HOST_IP}:${TRAEFIK_DASHBOARD_PORT}:${TRAEFIK_DASHBOARD_PORT}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - 'tls-certs:/tls-certs'
    networks:
      - public
      - private

  #############################################################################
  # 証明書ジェネレーター
  # TLS 証明書を生成する。
  #############################################################################
  tls-certs-generator:
    image: colabkit.tls-certs-generator:latest
    build:
      context: .
      dockerfile: tls-certs-generator/Dockerfile
    environment:
      RCA_SUBJECT: colabkit-rca
      RCA_EXPIRE: 39500
      RCA_CERT: colabkit-rca.crt
      RCA_KEY: colabkit-rca.key
      ICA_SUBJECT: colabkit-ica
      ICA_EXPIRE: 39500
      ICA_CERT: colabkit-ica.crt
      ICA_KEY: colabkit-ica.key
      # TLS Cert expiry
      TLS_EXPIRE: 60
      TLS_CERT_RENEWAL_INTERVAL_DAYS: 1
      TLS_SUBJECT: ${HOST_IP}
      TLS_CERT: server-tls.crt
      TLS_KEY: server-tls.key
      TLS_CHAIN_CERT: chain-tls.crt
      # comma seperate list of alternative hostname
      TLS_DNS: 
      #  comma seperate list of alternative IPs
      TLS_IP: ${HOST_IP}
    healthcheck:
      test: ["CMD", "bash", "-c", "test -f $${TLS_CHAIN_CERT}"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - 'tls-certs:/certs'

  #############################################################################
  # プロキシサーバー
  # 各サービスからインターネットにアクセスするための HTTP/HTTPS プロキシを提供する。
  #
  # Registry URL: https://hub.docker.com/r/ubuntu/squid
  #############################################################################
  squid:
    image: colabkit.squid:latest
    build:
      context: .
      dockerfile: squid/Dockerfile
      args:
        UBUNTU_SQUID_VERSION: 5.2-22.04_beta
    # /dev/tty を有効化
    # ログを /dev/tty に出力することで docker compose logs でログを確認できるようにする
    tty: true
    restart: always
    networks:
      - public
      - private
    environment:
      HTTP_PROXY: ${HTTP_PROXY:-}

  #############################################################################
  # Colabkit ポータル
  # Colabkit の利用ガイドを公開する。
  #
  # Registry URL: https://hub.docker.com/r/squidfunk/mkdocs-material
  # Registry URL: https://hub.docker.com/_/nginx
  #############################################################################
  portal:
    image: colabkit.portal:latest
    build:
      context: .
      dockerfile: portal/Dockerfile
      args:
        MKDOCS_MATERIAL_VERSION: 9.5
        NGINX_VERSION: 1.27
        HOST_IP: ${HOST_IP}
        PORTAL_HTTP_PORT: ${PORTAL_HTTP_PORT}
        PORTAL_HTTPS_PORT: ${PORTAL_HTTPS_PORT}
        GITLAB_PORT: ${GITLAB_PORT}
        GITLAB_MATTERMOST_PORT: ${GITLAB_MATTERMOST_PORT}
        GITLAB_PAGES_PORT: ${GITLAB_PAGES_PORT}
        GITLAB_REGISTRY_PORT: ${GITLAB_REGISTRY_PORT}
        SONARQUBE_PORT: ${SONARQUBE_PORT}
        OPENPROJECT_PORT: ${OPENPROJECT_PORT}
        GROWI_PORT: ${GROWI_PORT}
        PLANTUML_PORT: ${PLANTUML_PORT}
        LLDAP_WEB_PORT: ${LLDAP_WEB_PORT}
        TRAEFIK_DASHBOARD_PORT: ${TRAEFIK_DASHBOARD_PORT}
    labels:
      traefik.enable: true
      traefik.http.routers.portal-http.tls: false
      traefik.http.routers.portal-http.entrypoints: portal-http
      traefik.http.routers.portal-http.service: portal-http
      traefik.http.services.portal-http.loadbalancer.server.port: 80
      traefik.http.routers.portal-https.tls: true
      traefik.http.routers.portal-https.entrypoints: portal-https
      traefik.http.routers.portal-https.service: portal-https
      traefik.http.services.portal-https.loadbalancer.server.port: 80
    depends_on:
      - tls-certs-generator
    volumes:
      - 'tls-certs:/tls-certs'
    networks:
      - private

  #############################################################################
  # GitLab
  # Git リポジトリをホストし、CI/CD 等の機能を提供する。
  # バージョンアップ方法: https://docs.gitlab.com/ee/update/
  #
  # Registry URL: https://hub.docker.com/r/gitlab/gitlab-ce
  #############################################################################
  gitlab:
    image: colabkit.gitlab:latest
    build:
      context: .
      dockerfile: gitlab/Dockerfile
      args:
        GITLAB_VERSION: 17.6.1-ce.0
    restart: always
    environment:
      <<: *environment-http-proxy
      GITLAB_ROOT_PASSWORD: ${GITLAB_ROOT_PASSWORD}
      LDAP_BIND_USER_PASSWORD: ${LDAP_BIND_USER_PASSWORD}
      GITLAB_OMNIBUS_CONFIG: |
        # https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template

        # GitLab
        external_url 'https://${HOST_IP}:${GITLAB_PORT}'
        nginx['listen_port'] = 8929
        nginx['listen_https'] = false
        gitlab_rails['gitlab_shell_ssh_port'] = ${GITLAB_SSH_PORT}

        # GitLab Pages
        pages_external_url 'https://${HOST_IP}:${GITLAB_PAGES_PORT}'
        pages_nginx['listen_port'] = 8930
        pages_nginx['listen_https'] = false
        gitlab_pages['enable'] = true
        gitlab_pages["namespace_in_path"] = true
        gitlab_pages['dir'] = '/var/opt/gitlab/gitlab-pages'
        gitlab_pages['log_directory'] = '/var/log/gitlab/gitlab-pages'
        gitlab_pages['access_control'] = true
        gitlab_pages['artifacts_server'] = true
        gitlab_pages['internal_gitlab_server'] = 'http://gitlab:8929'

        # GitLab Container Registry
        registry_external_url 'https://${HOST_IP}:${GITLAB_REGISTRY_PORT}'
        registry_nginx['listen_port'] = 5050
        registry_nginx['listen_https'] = false

        # GitLab Mattermost
        mattermost_external_url 'https://${HOST_IP}:${GITLAB_MATTERMOST_PORT}'
        mattermost_nginx['listen_port'] = 3333
        mattermost_nginx['listen_https'] = false
        mattermost['env'] = {
          # Allow only GitLab users to sign in
          'MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL' => 'false',
          'MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL' => 'false',
          'MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME' => 'false',
          # Allow to access http proxy server
          'MM_SERVICESETTINGS_ALLOWEDUNTRUSTEDINTERNALCONNECTIONS' => 'squid',
          'HTTP_PROXY' => ENV['HTTP_PROXY'],
          'http_proxy' => ENV['http_proxy'],
          'HTTPS_PROXY' => ENV['HTTPS_PROXY'],
          'https_proxy' => ENV['https_proxy'],
          'NO_PROXY' => ENV['NO_PROXY'],
          'no_proxy' => ENV['no_proxy']
        }
        
        # LDAP Authorization
        gitlab_rails['ldap_enabled'] = true
        gitlab_rails['ldap_servers'] = {
          'main' => {
            'label' => 'LDAP',
            'host' =>  'lldap',
            'port' => 3890,
            'encryption' => 'plain',
            'active_directory' => false,
            'timeout' => 10,
            'uid' => 'uid',
            'base' => 'ou=people,dc=colabkit,dc=internal',
            'bind_dn' => 'uid=bind_user,ou=people,dc=colabkit,dc=internal',
            'password' => ENV['LDAP_BIND_USER_PASSWORD'],
            'attributes' => {
              'username' => 'uid',
              'email' => 'mail',
              'name' => 'displayName',
              'first_name' => 'givenName',
              'last_name' => 'sn'
            },
            'lowercase_usernames' => 'false',
            'allow_username_or_email_login' => false,
            'block_auto_created_users' => false
          }
        }
    labels:
      traefik.enable: true
      traefik.http.routers.gitlab.tls: true
      traefik.http.routers.gitlab.entrypoints: gitlab
      traefik.http.routers.gitlab.service: gitlab
      traefik.http.services.gitlab.loadbalancer.server.port: 8929
      traefik.http.routers.gitlab-pages.tls: true
      traefik.http.routers.gitlab-pages.entrypoints: gitlab-pages
      traefik.http.routers.gitlab-pages.service: gitlab-pages
      traefik.http.services.gitlab-pages.loadbalancer.server.port: 8930
      traefik.tcp.routers.gitlab-ssh.entrypoints: gitlab-ssh
      traefik.tcp.routers.gitlab-ssh.rule: HostSNI(`*`)
      traefik.tcp.routers.gitlab-ssh.service: gitlab-ssh
      traefik.tcp.services.gitlab-ssh.loadbalancer.server.port: 22
      traefik.http.routers.gitlab-registry.tls: true
      traefik.http.routers.gitlab-registry.entrypoints: gitlab-registry
      traefik.http.routers.gitlab-registry.service: gitlab-registry
      traefik.http.services.gitlab-registry.loadbalancer.server.port: 5050
      traefik.http.routers.gitlab-mattermost.tls: true
      traefik.http.routers.gitlab-mattermost.entrypoints: gitlab-mattermost
      traefik.http.routers.gitlab-mattermost.service: gitlab-mattermost
      traefik.http.services.gitlab-mattermost.loadbalancer.server.port: 3333
    volumes:
      - 'gitlab-config:/etc/gitlab'
      - 'gitlab-logs:/var/log/gitlab'
      - 'gitlab-data:/var/opt/gitlab'
    networks:
      - private
    shm_size: '256m'

  #############################################################################
  # CI/CD ランナー
  # GitLab の CI/CD ジョブを実行する。
  #
  # Registry URL: https://hub.docker.com/r/gitlab/gitlab-runner
  #############################################################################
  gitlab-runner:
    image: colabkit.gitlab-runner:latest
    build:
      context: .
      dockerfile: gitlab-runner/Dockerfile
    restart: always
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'gitlab-runner-config:/etc/gitlab-runner'
      - 'tls-certs:/tls-certs'
    networks:
      - private

  #############################################################################
  # SMTP ゲートウェイサービス
  # SMTP によるメール通知を Mattermost DM に配信する。
  #############################################################################
  smtp-mattermost-gateway:
    image: colabkit.smtp-mattermost-gateway:latest
    build:
      context: .
      dockerfile: smtp-mattermost-gateway/Dockerfile
    restart: always
    environment:
      MATTERMOST_URL: http://gitlab:3333
    networks:
      - private

  #############################################################################
  # コード品質管理サービス
  # ソースコードを静的解析し、品質を検査する。
  #
  # Registry URL: https://hub.docker.com/_/sonarqube
  #############################################################################
  sonarqube:
    image: colabkit.sonarqube:latest
    build:
      context: .
      dockerfile: sonarqube/Dockerfile
      args:
        SONARQUBE_VERSION: 9.9.8-community
    restart: always
    depends_on:
      - sonarqube-postgresql
    labels:
      traefik.enable: true
      traefik.http.routers.sonarqube.tls: true
      traefik.http.routers.sonarqube.entrypoints: sonarqube
      traefik.http.routers.sonarqube.service: sonarqube
      traefik.http.services.sonarqube.loadbalancer.server.port: 9000
    environment:
      SONAR_WEB_JAVAOPTS: >-
        -Dhttp.proxyHost=squid
        -Dhttp.proxyPort=3128
        -Dhttp.nonProxyHosts=localhost|gitlab
        -Dhttps.proxyHost=squid
        -Dhttps.proxyPort=3128
        -Dhttps.nonProxyHosts=localhost|gitlab
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-postgresql:5432/sonarqube
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-logs:/opt/sonarqube/logs
      - sonarqube-extensions:/opt/sonarqube/extensions
    networks:
      - private

  sonarqube-postgresql:
    image: postgres:17.2
    restart: always
    environment:
      POSTGRES_DB: sonarqube
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - sonarqube-postgresql:/var/lib/postgresql/data
    networks:
      - private
  
  #############################################################################
  # OpenProject
  # タスク管理を支援する。
  #
  # 公式の docker compose ファイル:
  # https://github.com/opf/openproject-docker-compose/tree/stable/15
  #
  # Registry URL: https://hub.docker.com/r/openproject/openproject
  #############################################################################
  openproject:
    image: colabkit.openproject:latest
    build: &openproject-build
      context: .
      dockerfile: openproject/Dockerfile
      args:
        OPENPROJECT_VERSION: 15-slim
    command: ["./docker/prod/web"]
    # https://www.openproject.org/docs/installation-and-operations/configuration/environment/#supported-environment-variables
    environment: &openproject-environment
      <<: *environment-http-proxy
      OPENPROJECT_HTTPS: true
      OPENPROJECT_HOST__NAME: ${HOST_IP}:${OPENPROJECT_PORT}
      OPENPROJECT_HSTS: true
      OPENPROJECT_EE__MANAGER__VISIBLE: false
      RAILS_CACHE_STORE: memcached
      OPENPROJECT_CACHE__MEMCACHE__SERVER: openproject-memcached:11211
      OPENPROJECT_RAILS__RELATIVE__URL__ROOT:
      DATABASE_URL: postgresql://openproject:openproject@openproject-postgresql:5432/openproject?pool=20&encoding=unicode&reconnect=true
      RAILS_MIN_THREADS: 4
      RAILS_MAX_THREADS: 16
      OPENPROJECT_SEED_LDAP_COLABKIT_HOST: lldap
      OPENPROJECT_SEED_LDAP_COLABKIT_PORT: 3890
      OPENPROJECT_SEED_LDAP_COLABKIT_SECURITY: plain_ldap
      OPENPROJECT_SEED_LDAP_COLABKIT_TLS__VERIFY: false
      OPENPROJECT_SEED_LDAP_COLABKIT_BINDUSER: uid=bind_user,ou=people,dc=colabkit,dc=internal
      OPENPROJECT_SEED_LDAP_COLABKIT_BINDPASSWORD: ${LDAP_BIND_USER_PASSWORD}
      OPENPROJECT_SEED_LDAP_COLABKIT_BASEDN: ou=people,dc=colabkit,dc=internal
      OPENPROJECT_SEED_LDAP_COLABKIT_SYNC__USERS: true
      OPENPROJECT_SEED_LDAP_COLABKIT_LOGIN__MAPPING: uid
      OPENPROJECT_SEED_LDAP_COLABKIT_FIRSTNAME__MAPPING: givenName
      OPENPROJECT_SEED_LDAP_COLABKIT_LASTNAME__MAPPING: sn
      OPENPROJECT_SEED_LDAP_COLABKIT_MAIL__MAPPING: mail
      # set to true to enable the email receiving feature. See ./docker/cron for more options
      IMAP_ENABLED: false
      OPENPROJECT_DEFAULT__LANGUAGE: ja
      OPENPROJECT_USER__DEFAULT__TIMEZONE: Asia/Tokyo
    labels:
      traefik.enable: true
      traefik.http.routers.openproject.tls: true
      traefik.http.routers.openproject.entrypoints: openproject
      traefik.http.routers.openproject.service: openproject
      traefik.http.services.openproject.loadbalancer.server.port: 8080
    restart: always
    depends_on:
      - openproject-postgresql
      - openproject-memcached
      - openproject-seeder
    volumes:
      - openproject-data:/var/openproject/assets
    networks:
      - private

  openproject-seeder:
    image: colabkit.openproject:latest
    build:
      <<: *openproject-build
    command: ["./docker/prod/seeder"]
    environment:
      <<: *openproject-environment
    restart: on-failure
    networks:
      - private

  openproject-worker:
    image: colabkit.openproject:latest
    build:
      <<: *openproject-build
    command: ["./docker/prod/worker"]
    environment:
      <<: *openproject-environment
    depends_on:
      - openproject-postgresql
      - openproject-memcached
      - openproject-seeder
    networks:
      - private

  openproject-cron:
    image: colabkit.openproject:latest
    build:
      <<: *openproject-build
    command: ["./docker/prod/cron"]
    environment:
      <<: *openproject-environment
    depends_on:
      - openproject-postgresql
      - openproject-memcached
      - openproject-seeder
    networks:
      - private
  
  openproject-postgresql:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: openproject
      POSTGRES_USER: openproject
      POSTGRES_PASSWORD: openproject
    volumes:
      - openproject-postgresql:/var/lib/postgresql/data
    networks:
      - private

  openproject-memcached:
    image: memcached:1.6
    restart: always
    networks:
      - private

  #############################################################################
  # Wiki サーバー
  # リアルタイム共同編集が可能な Markdown ベースの Wiki サービスを提供する。
  #
  # 公式の docker compose ファイル:
  # https://github.com/weseek/growi-docker-compose
  #
  # Registry URL: https://hub.docker.com/r/weseek/growi
  #############################################################################
  growi:
    image: colabkit.growi:latest
    build:
      context: .
      dockerfile: growi/Dockerfile
      args:
        GROWI_VERSION: 7
    depends_on:
      growi-mongodb:
        condition: service_healthy
      growi-elasticsearch:
        condition: service_healthy
    environment:
      <<: *environment-http-proxy
      APP_SITE_URL: https://${HOST_IP}:${GROWI_PORT}
      MONGO_URI: mongodb://growi-mongodb:27017/growi
      ELASTICSEARCH_URI: http://growi-elasticsearch:9200/growi
      PASSWORD_SEED: changeme
      FILE_UPLOAD: mongodb
      MATHJAX: 1
      FORCE_WIKI_MODE: public
      DRAWIO_URI: https://${HOST_IP}:${DROWIO_PORT}
      PLANTUML_URI: https://${HOST_IP}:${PLANTUML_PORT}
    labels:
      traefik.enable: true
      traefik.http.routers.growi.tls: true
      traefik.http.routers.growi.entrypoints: growi
      traefik.http.routers.growi.service: growi
      traefik.http.services.growi.loadbalancer.server.port: 3000
    restart: unless-stopped
    volumes:
      - growi-data:/data
    networks:
      - private

  # Registry URL: https://hub.docker.com/_/mongo
  growi-mongodb:
    image: mongo:6.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -n > /dev/tcp/127.0.0.1/27017"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - growi-mongo-configdb:/data/configdb
      - growi-mongo-db:/data/db
    networks:
      - private

  # Registry URL: https://hub.docker.com/_/elasticsearch
  growi-elasticsearch:
    image: colabkit.elasticsearch:latest
    build:
      context: .
      dockerfile: growi-elasticsearch/Dockerfile
      args:
        ELASTICSEARCH_VERSION: 8.7.0
    environment:
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: -Xms256m -Xmx256m   # increase amount if you have enough memory
      LOG4J_FORMAT_MSG_NO_LOOKUPS: true # CVE-2021-44228 mitigation for Elasticsearch <= 6.8.20/7.16.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "bash", "-c", "echo -n > /dev/tcp/127.0.0.1/9200"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    volumes:
      - growi-es-data:/usr/share/elasticsearch/data
    networks:
      - private

  #############################################################################
  # PlantUML サーバー
  # テキストから UML 図を生成する。
  # 
  # Registry URL: https://hub.docker.com/r/plantuml/plantuml-server
  #############################################################################
  plantuml:
    image: plantuml/plantuml-server:jetty
    labels:
      traefik.enable: true
      traefik.http.routers.plantuml.tls: true
      traefik.http.routers.plantuml.entrypoints: plantuml
      traefik.http.routers.plantuml.service: plantuml
      traefik.http.services.plantuml.loadbalancer.server.port: 8080
    networks:
      - private

  #############################################################################
  # draw.io サーバー
  # ブラウザ上で作図できるようにする。
  # 
  # Registry URL: https://hub.docker.com/r/jgraph/drawio
  #############################################################################
  drawio:
    image: jgraph/drawio:26.0.9
    labels:
      traefik.enable: true
      traefik.http.routers.drawio.tls: true
      traefik.http.routers.drawio.entrypoints: drawio
      traefik.http.routers.drawio.service: drawio
      traefik.http.services.drawio.loadbalancer.server.port: 8080
    networks:
      - private

  #############################################################################
  # LDAP サーバー
  # 各種サービスにログインするためのユーザーを集中管理する。
  #
  # Registry URL: https://hub.docker.com/r/lldap/lldap
  #############################################################################
  lldap:
    image: lldap/lldap:stable
    labels:
      traefik.enable: true
      traefik.http.routers.lldap.tls: true
      traefik.http.routers.lldap.entrypoints: lldap
      traefik.http.routers.lldap.service: lldap
      traefik.http.services.lldap.loadbalancer.server.port: 17170
    volumes:
      - lldap-data:/data
    networks:
      - private
    environment:
      LLDAP_LDAP_USER_PASS: ${LDAP_ADMIN_PASSWORD}
      LLDAP_JWT_SECRET: REPLACE_WITH_RANDOM
      LLDAP_KEY_SEED: REPLACE_WITH_RANDOM
      LLDAP_LDAP_BASE_DN: dc=colabkit,dc=internal

volumes:
  tls-certs:
  gitlab-config:
  gitlab-logs:
  gitlab-data:
  gitlab-runner-config:
  sonarqube-data:
  sonarqube-logs:
  sonarqube-extensions:
  sonarqube-postgresql:
  openproject-data:
  openproject-postgresql:
  growi-data:
  growi-mongo-configdb:
  growi-mongo-db:
  growi-es-data:
  lldap-data:

networks:
  public:
    name: colabkit_public
  private:
    name: colabkit_private
    internal: true
